{
  "Parameters": {
    "OAuthEnabled": {
      "AllowedValues": [
        "true",
        "false"
      ],
      "Description": "\nEnable OAuth authentication",
      "Type": "String",
      "Default": "true"
    },
    "KeyName": {
      "Description": "Required: Specify your AWS EC2 Key Pair.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "SlaveInstanceCount": {
      "Description": "Required: Specify the number of private agent nodes or accept the default.",
      "Type": "Number",
      "Default": "5"
    },
    "PublicSlaveInstanceCount": {
      "Description": "Required: Specify the number of public agent nodes or accept the default.",
      "Type": "Number",
      "Default": "1"
    },
    "AdminLocation": {
      "Default": "0.0.0.0/0",
      "Type": "String",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "MinLength": "9",
      "MaxLength": "18",
      "Description": "Optional: Specify the IP range to whitelist for access to the admin zone. Must be a valid CIDR.",
      "ConstraintDescription": "must be a valid CIDR."
    }
  },
  "Mappings": {
    "Parameters": {
      "PrivateSubnetRange": {
        "default": "10.0.0.0/22"
      },
      "StackCreationTimeout": {
        "default": "PT45M"
      },
      "PublicSubnetRange": {
        "default": "10.0.4.0/22"
      },
      "SlaveInstanceType": {
        "default": "m3.xlarge"
      },
      "VPCSubnetRange": {
        "default": "10.0.0.0/16"
      },
      "PublicSlaveInstanceType": {
        "default": "m3.xlarge"
      },
      "MasterInstanceType": {
        "default": "m3.xlarge"
      }
    },
    "NATAmi": {
      "eu-central-1": {
        "default": "ami-204c7a3d"
      },
      "eu-west-1": {
        "default": "ami-3760b040"
      },
      "us-west-2": {
        "default": "ami-bb69128b"
      },
      "us-west-1": {
        "default": "ami-2b2b296e"
      },
      "sa-east-1": {
        "default": "ami-b972dba4"
      },
      "ap-southeast-1": {
        "default": "ami-b082dae2"
      },
      "us-gov-west-1": {
        "default": "ami-e8ab1489"
      },
      "us-east-1": {
        "default": "ami-4c9e4b24"
      },
      "ap-southeast-2": {
        "default": "ami-996402a3"
      },
      "ap-northeast-1": {
        "default": "ami-55c29e54"
      }
    },
    "RegionToAmi": {
      "eu-central-1": {
        "stable": "ami-3ae31555"
      },
      "eu-west-1": {
        "stable": "ami-b7cba3c4"
      },
      "us-gov-west-1": {
        "stable": "ami-b712acd6"
      },
      "us-west-1": {
        "stable": "ami-ee57148e"
      },
      "us-west-2": {
        "stable": "ami-dc6ba3bc"
      },
      "sa-east-1": {
        "stable": "ami-61e3750d"
      },
      "ap-southeast-1": {
        "stable": "ami-3120fe52"
      },
      "us-east-1": {
        "stable": "ami-6d138f7a"
      },
      "ap-southeast-2": {
        "stable": "ami-b1291dd2"
      },
      "ap-northeast-1": {
        "stable": "ami-965899f7"
      }
    }
  },
  "Conditions": {
    "RegionIsUsEast1": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-east-1"
      ]
    },
    "RegionIsUsGovWest1": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-gov-west-1"
      ]
    }
  },
  "Outputs": {
    "ExhibitorS3Bucket": {
      "Value": {
        "Ref": "ExhibitorS3Bucket"
      },
      "Description": "Exhibitor S3 bucket name"
    },
    "PublicSlaveDnsAddress": {
      "Value": {
        "Fn::GetAtt": [
          "PublicSlaveLoadBalancer",
          "DNSName"
        ]
      },
      "Description": "Public slaves"
    },
    "DnsAddress": {
      "Value": {
        "Fn::GetAtt": [
          "ElasticLoadBalancer",
          "DNSName"
        ]
      },
      "Description": "Mesos Master"
    }
  },
  "Metadata": {
    "DcosImageCommit": "1b43ff7a0b9124db9439299b789f2e2dc3cc086c",
    "TemplateGenerationDate": "2016-11-15 18:07:47.173102",
    "AWS::CloudFormation::Designer": {
      "fe88d63b-0847-4cd1-be43-3d9db1b93824": {
        "size": {
          "width": 1050,
          "height": 960
        },
        "position": {
          "x": 60,
          "y": 90
        },
        "z": 1,
        "embeds": [
          "25bf8ac8-379a-4383-a064-8479b44b6767",
          "902e65ce-8890-40c0-9bf4-678858640771",
          "eb322cf7-f6f6-47a3-bba1-59d68f3bb961",
          "8beb8ec8-25ff-4518-8b39-e6a6708fa401",
          "cb93ba8e-5ffd-4367-b559-ab5b1c1d6fbb",
          "1de54125-690f-4f3a-8a88-dad9b8565641",
          "483b1df6-7fc4-436b-823c-eb6aec56609f",
          "c88c089c-ee14-4c59-ba46-ed08f2740db4",
          "76b90941-a149-4959-b05a-d9782b2e65c9",
          "09794e9b-0b3f-4c96-bfaa-bfc446a160ac",
          "2f6e15d6-607a-4401-9668-6f77628d0e90"
        ]
      },
      "884c9386-07fb-4acb-a626-c72fa6136b84": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 1110
        },
        "z": 1,
        "embeds": []
      },
      "25bf8ac8-379a-4383-a064-8479b44b6767": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 780,
          "y": 660
        },
        "z": 2,
        "parent": "fe88d63b-0847-4cd1-be43-3d9db1b93824",
        "embeds": []
      },
      "902e65ce-8890-40c0-9bf4-678858640771": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 900,
          "y": 660
        },
        "z": 2,
        "parent": "fe88d63b-0847-4cd1-be43-3d9db1b93824",
        "embeds": []
      },
      "c495822e-01ad-4c98-a60e-4031e3a4d24c": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 180,
          "y": 1110
        },
        "z": 1,
        "embeds": [],
        "dependson": [
          "fe88d63b-0847-4cd1-be43-3d9db1b93824"
        ]
      },
      "eb322cf7-f6f6-47a3-bba1-59d68f3bb961": {
        "size": {
          "width": 240,
          "height": 240
        },
        "position": {
          "x": 780,
          "y": 150
        },
        "z": 2,
        "parent": "fe88d63b-0847-4cd1-be43-3d9db1b93824",
        "embeds": [
          "01dac425-628b-4426-9b8a-13427d4ef33e"
        ]
      },
      "74c6221e-df74-4edb-aec4-718917a9f565": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 300,
          "y": 1110
        },
        "z": 1,
        "embeds": []
      },
      "48c2cc32-2edc-4178-a9f2-9138343282a6": {
        "source": {
          "id": "884c9386-07fb-4acb-a626-c72fa6136b84"
        },
        "target": {
          "id": "fe88d63b-0847-4cd1-be43-3d9db1b93824"
        },
        "z": 1
      },
      "a4371fb6-1504-474c-a77c-514619c74c1e": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 420,
          "y": 1110
        },
        "z": 1,
        "embeds": []
      },
      "f6c842a9-1c3f-4d4f-a69b-4d791662b5c7": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 540,
          "y": 1110
        },
        "z": 1,
        "embeds": [],
        "isrelatedto": [
          "a4371fb6-1504-474c-a77c-514619c74c1e"
        ]
      },
      "059d9b6a-0e55-4a11-ba12-b3852b055421": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 660,
          "y": 1110
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "f6c842a9-1c3f-4d4f-a69b-4d791662b5c7"
        ]
      },
      "8beb8ec8-25ff-4518-8b39-e6a6708fa401": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 90,
          "y": 750
        },
        "z": 2,
        "parent": "fe88d63b-0847-4cd1-be43-3d9db1b93824",
        "embeds": []
      },
      "25edc8b4-6d2f-4ea2-8c67-c4d744822018": {
        "source": {
          "id": "8beb8ec8-25ff-4518-8b39-e6a6708fa401"
        },
        "target": {
          "id": "25bf8ac8-379a-4383-a064-8479b44b6767"
        },
        "z": 2
      },
      "b47ea0f6-57e5-497e-989d-c6aa1de07502": {
        "source": {
          "id": "25bf8ac8-379a-4383-a064-8479b44b6767"
        },
        "target": {
          "id": "8beb8ec8-25ff-4518-8b39-e6a6708fa401"
        },
        "z": 2
      },
      "b2d08d70-6f11-4e8b-9309-003b08f3a8a1": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 780,
          "y": 1110
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "74c6221e-df74-4edb-aec4-718917a9f565"
        ]
      },
      "cb93ba8e-5ffd-4367-b559-ab5b1c1d6fbb": {
        "size": {
          "width": 240,
          "height": 240
        },
        "position": {
          "x": 480,
          "y": 450
        },
        "z": 2,
        "parent": "fe88d63b-0847-4cd1-be43-3d9db1b93824",
        "embeds": [
          "e34dd428-2653-45bf-a526-f192a56571f3"
        ],
        "dependson": [
          "fe88d63b-0847-4cd1-be43-3d9db1b93824"
        ]
      },
      "8399f57d-69df-4f3f-8189-be32111810af": {
        "source": {
          "id": "902e65ce-8890-40c0-9bf4-678858640771"
        },
        "target": {
          "id": "8beb8ec8-25ff-4518-8b39-e6a6708fa401"
        },
        "z": 2
      },
      "1de54125-690f-4f3a-8a88-dad9b8565641": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 210,
          "y": 750
        },
        "z": 2,
        "parent": "fe88d63b-0847-4cd1-be43-3d9db1b93824",
        "embeds": []
      },
      "483b1df6-7fc4-436b-823c-eb6aec56609f": {
        "size": {
          "width": 240,
          "height": 240
        },
        "position": {
          "x": 480,
          "y": 150
        },
        "z": 2,
        "parent": "fe88d63b-0847-4cd1-be43-3d9db1b93824",
        "embeds": [
          "87f589a8-57dc-4944-90bc-9bd8dc2da2d9"
        ],
        "dependson": [
          "fe88d63b-0847-4cd1-be43-3d9db1b93824"
        ]
      },
      "cf66e490-6529-4c64-9acf-6655ea5c1ee7": {
        "source": {
          "id": "cb93ba8e-5ffd-4367-b559-ab5b1c1d6fbb"
        },
        "target": {
          "id": "483b1df6-7fc4-436b-823c-eb6aec56609f"
        },
        "z": 2
      },
      "c88c089c-ee14-4c59-ba46-ed08f2740db4": {
        "size": {
          "width": 330,
          "height": 240
        },
        "position": {
          "x": 90,
          "y": 450
        },
        "z": 2,
        "parent": "fe88d63b-0847-4cd1-be43-3d9db1b93824",
        "embeds": [
          "c1097873-fcfb-4727-8160-3420cab1da12",
          "e269025c-e43e-4397-8798-b5f596468ae7"
        ]
      },
      "c1097873-fcfb-4727-8160-3420cab1da12": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 120,
          "y": 510
        },
        "z": 3,
        "parent": "c88c089c-ee14-4c59-ba46-ed08f2740db4",
        "embeds": []
      },
      "e269025c-e43e-4397-8798-b5f596468ae7": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 240,
          "y": 510
        },
        "z": 3,
        "parent": "c88c089c-ee14-4c59-ba46-ed08f2740db4",
        "embeds": []
      },
      "76b90941-a149-4959-b05a-d9782b2e65c9": {
        "size": {
          "width": 330,
          "height": 240
        },
        "position": {
          "x": 90,
          "y": 150
        },
        "z": 2,
        "parent": "fe88d63b-0847-4cd1-be43-3d9db1b93824",
        "embeds": [
          "28ddc21b-3a6b-4177-ac98-786fc650a54a",
          "3a5a5fd3-5778-4b04-aa8e-42b9e54b025b"
        ]
      },
      "28ddc21b-3a6b-4177-ac98-786fc650a54a": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 120,
          "y": 210
        },
        "z": 3,
        "parent": "76b90941-a149-4959-b05a-d9782b2e65c9",
        "embeds": []
      },
      "5c6fa025-d4dc-4f3b-a2fc-3ae54ffabd19": {
        "source": {
          "id": "76b90941-a149-4959-b05a-d9782b2e65c9"
        },
        "target": {
          "id": "483b1df6-7fc4-436b-823c-eb6aec56609f"
        },
        "z": 2
      },
      "09794e9b-0b3f-4c96-bfaa-bfc446a160ac": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 330,
          "y": 750
        },
        "z": 2,
        "parent": "fe88d63b-0847-4cd1-be43-3d9db1b93824",
        "embeds": [],
        "isrelatedto": [
          "902e65ce-8890-40c0-9bf4-678858640771"
        ]
      },
      "9c0a65b6-9b6a-456f-8c8c-ce0a5b481d45": {
        "source": {
          "id": "8beb8ec8-25ff-4518-8b39-e6a6708fa401"
        },
        "target": {
          "id": "09794e9b-0b3f-4c96-bfaa-bfc446a160ac"
        },
        "z": 2
      },
      "f45c0b77-7912-4a51-92a4-ce27e7849c69": {
        "source": {
          "id": "25bf8ac8-379a-4383-a064-8479b44b6767"
        },
        "target": {
          "id": "09794e9b-0b3f-4c96-bfaa-bfc446a160ac"
        },
        "z": 2
      },
      "19940039-1acd-484b-842a-bb584d4984ff": {
        "source": {
          "id": "09794e9b-0b3f-4c96-bfaa-bfc446a160ac"
        },
        "target": {
          "id": "25bf8ac8-379a-4383-a064-8479b44b6767"
        },
        "z": 2
      },
      "d9798406-bf54-4061-a5a9-eb18f91f706b": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 900,
          "y": 1110
        },
        "z": 1,
        "embeds": [],
        "isconnectedto": [
          "483b1df6-7fc4-436b-823c-eb6aec56609f"
        ],
        "ismemberof": [
          "902e65ce-8890-40c0-9bf4-678858640771",
          "1de54125-690f-4f3a-8a88-dad9b8565641",
          "8beb8ec8-25ff-4518-8b39-e6a6708fa401",
          "25bf8ac8-379a-4383-a064-8479b44b6767",
          "09794e9b-0b3f-4c96-bfaa-bfc446a160ac"
        ]
      },
      "a5273b92-cc8b-4e0f-9506-752cab2aa617": {
        "source": {
          "id": "09794e9b-0b3f-4c96-bfaa-bfc446a160ac"
        },
        "target": {
          "id": "8beb8ec8-25ff-4518-8b39-e6a6708fa401"
        },
        "z": 2
      },
      "0e3ea0ed-8965-4d9b-b757-d4f269d06b86": {
        "source": {
          "id": "c495822e-01ad-4c98-a60e-4031e3a4d24c"
        },
        "target": {
          "id": "fe88d63b-0847-4cd1-be43-3d9db1b93824"
        },
        "z": 1
      },
      "4414725e-16c2-4b7e-82ff-52747eede87d": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1020,
          "y": 1110
        },
        "z": 1,
        "embeds": [],
        "isconnectedto": [
          "483b1df6-7fc4-436b-823c-eb6aec56609f"
        ],
        "ismemberof": [
          "25bf8ac8-379a-4383-a064-8479b44b6767"
        ],
        "dependson": [
          "0e3ea0ed-8965-4d9b-b757-d4f269d06b86"
        ]
      },
      "e34dd428-2653-45bf-a526-f192a56571f3": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 510,
          "y": 510
        },
        "z": 3,
        "parent": "cb93ba8e-5ffd-4367-b559-ab5b1c1d6fbb",
        "embeds": [],
        "references": [
          "c495822e-01ad-4c98-a60e-4031e3a4d24c"
        ],
        "dependson": [
          "0e3ea0ed-8965-4d9b-b757-d4f269d06b86"
        ]
      },
      "87f589a8-57dc-4944-90bc-9bd8dc2da2d9": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 510,
          "y": 210
        },
        "z": 3,
        "parent": "483b1df6-7fc4-436b-823c-eb6aec56609f",
        "embeds": [],
        "dependson": [
          "0e3ea0ed-8965-4d9b-b757-d4f269d06b86"
        ],
        "isrelatedto": [
          "8beb8ec8-25ff-4518-8b39-e6a6708fa401",
          "09794e9b-0b3f-4c96-bfaa-bfc446a160ac",
          "1de54125-690f-4f3a-8a88-dad9b8565641"
        ]
      },
      "c500d8eb-9929-43e8-af1a-75cb3a725b56": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1170,
          "y": 90
        },
        "z": 1,
        "embeds": [],
        "isconnectedto": [
          "483b1df6-7fc4-436b-823c-eb6aec56609f"
        ],
        "ismemberof": [
          "902e65ce-8890-40c0-9bf4-678858640771",
          "1de54125-690f-4f3a-8a88-dad9b8565641"
        ],
        "dependson": [
          "0e3ea0ed-8965-4d9b-b757-d4f269d06b86"
        ]
      },
      "2a08317a-1625-405f-af11-858b056ceedc": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1170,
          "y": 210
        },
        "z": 1,
        "embeds": [],
        "ismemberof": [
          "09794e9b-0b3f-4c96-bfaa-bfc446a160ac",
          "1de54125-690f-4f3a-8a88-dad9b8565641"
        ],
        "isrelatedto": [
          "d9798406-bf54-4061-a5a9-eb18f91f706b",
          "a4371fb6-1504-474c-a77c-514619c74c1e",
          "f6c842a9-1c3f-4d4f-a69b-4d791662b5c7",
          "74c6221e-df74-4edb-aec4-718917a9f565",
          "c500d8eb-9929-43e8-af1a-75cb3a725b56",
          "059d9b6a-0e55-4a11-ba12-b3852b055421"
        ]
      },
      "88517ea8-97b6-4d23-b46c-ac1731f339d0": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1170,
          "y": 330
        },
        "z": 1,
        "embeds": [],
        "ismemberof": [
          "8beb8ec8-25ff-4518-8b39-e6a6708fa401"
        ],
        "isrelatedto": [
          "d9798406-bf54-4061-a5a9-eb18f91f706b",
          "a4371fb6-1504-474c-a77c-514619c74c1e",
          "f6c842a9-1c3f-4d4f-a69b-4d791662b5c7",
          "74c6221e-df74-4edb-aec4-718917a9f565",
          "c500d8eb-9929-43e8-af1a-75cb3a725b56",
          "b2d08d70-6f11-4e8b-9309-003b08f3a8a1"
        ]
      },
      "cd9920e1-b7d4-443f-9e0d-ab74dfca0663": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1170,
          "y": 450
        },
        "z": 1,
        "embeds": [],
        "ismemberof": [
          "25bf8ac8-379a-4383-a064-8479b44b6767"
        ],
        "isrelatedto": [
          "d9798406-bf54-4061-a5a9-eb18f91f706b",
          "a4371fb6-1504-474c-a77c-514619c74c1e",
          "f6c842a9-1c3f-4d4f-a69b-4d791662b5c7",
          "74c6221e-df74-4edb-aec4-718917a9f565",
          "c500d8eb-9929-43e8-af1a-75cb3a725b56",
          "b2d08d70-6f11-4e8b-9309-003b08f3a8a1"
        ]
      },
      "f4b31ce5-75e2-4a72-b337-032897bbf5d5": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1170,
          "y": 570
        },
        "z": 1,
        "embeds": [],
        "isconnectedto": [
          "483b1df6-7fc4-436b-823c-eb6aec56609f",
          "4414725e-16c2-4b7e-82ff-52747eede87d"
        ],
        "isassociatedwith": [
          "cd9920e1-b7d4-443f-9e0d-ab74dfca0663"
        ],
        "dependson": [
          "0e3ea0ed-8965-4d9b-b757-d4f269d06b86"
        ]
      },
      "ce1c6e72-5e5d-4d68-a744-db31124aeba9": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1170,
          "y": 690
        },
        "z": 1,
        "embeds": [],
        "isconnectedto": [
          "483b1df6-7fc4-436b-823c-eb6aec56609f",
          "c500d8eb-9929-43e8-af1a-75cb3a725b56",
          "d9798406-bf54-4061-a5a9-eb18f91f706b"
        ],
        "isassociatedwith": [
          "2a08317a-1625-405f-af11-858b056ceedc"
        ],
        "dependson": [
          "0e3ea0ed-8965-4d9b-b757-d4f269d06b86"
        ]
      },
      "01dac425-628b-4426-9b8a-13427d4ef33e": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 810,
          "y": 210
        },
        "z": 3,
        "parent": "eb322cf7-f6f6-47a3-bba1-59d68f3bb961",
        "embeds": [],
        "references": [
          "87f589a8-57dc-4944-90bc-9bd8dc2da2d9"
        ]
      },
      "2f6e15d6-607a-4401-9668-6f77628d0e90": {
        "size": {
          "width": 150,
          "height": 150
        },
        "position": {
          "x": 780,
          "y": 450
        },
        "z": 2,
        "parent": "fe88d63b-0847-4cd1-be43-3d9db1b93824",
        "embeds": [],
        "dependson": [
          "fe88d63b-0847-4cd1-be43-3d9db1b93824"
        ]
      },
      "12b1b342-c593-41d7-b56f-d355c546a582": {
        "source": {
          "id": "c88c089c-ee14-4c59-ba46-ed08f2740db4"
        },
        "target": {
          "id": "2f6e15d6-607a-4401-9668-6f77628d0e90"
        },
        "z": 2
      },
      "1796af19-c09f-46e3-9df1-a324156013ad": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 1170,
          "y": 810
        },
        "z": 1,
        "embeds": [],
        "isconnectedto": [
          "2f6e15d6-607a-4401-9668-6f77628d0e90"
        ],
        "isassociatedwith": [
          "88517ea8-97b6-4d23-b46c-ac1731f339d0"
        ],
        "dependson": [
          "0e3ea0ed-8965-4d9b-b757-d4f269d06b86"
        ]
      },
      "3a5a5fd3-5778-4b04-aa8e-42b9e54b025b": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 240,
          "y": 210
        },
        "z": 3,
        "parent": "76b90941-a149-4959-b05a-d9782b2e65c9",
        "embeds": []
      },
      "3d0ea585-3dcd-4210-87be-492e7569f44d": {
        "source": {
          "id": "eb322cf7-f6f6-47a3-bba1-59d68f3bb961"
        },
        "target": {
          "id": "2f6e15d6-607a-4401-9668-6f77628d0e90"
        },
        "z": 2
      }
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "DC/OS AWS CloudFormation Template",
  "Resources": {
    "PrivateSubnetRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnet"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "3d0ea585-3dcd-4210-87be-492e7569f44d"
        }
      }
    },
    "PublicSlaveIngressThree": {
      "Properties": {
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "FromPort": "5052",
        "ToPort": "32000"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "OutboundNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "Egress": "true",
        "Protocol": "-1",
        "RuleAction": "allow",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      },
      "Type": "AWS::EC2::NetworkAclEntry",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "3a5a5fd3-5778-4b04-aa8e-42b9e54b025b"
        }
      }
    },
    "PrivateSubnet": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "Parameters",
            "PrivateSubnetRange",
            "default"
          ]
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Private",
            "Key": "Network"
          }
        ]
      },
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::Subnet",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "2f6e15d6-607a-4401-9668-6f77628d0e90"
        }
      }
    },
    "PrivateRoute": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "InstanceId": {
          "Ref": "NATInstance"
        }
      },
      "Type": "AWS::EC2::Route",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "01dac425-628b-4426-9b8a-13427d4ef33e"
        }
      }
    },
    "ElasticLoadBalancer": {
      "Properties": {
        "HealthCheck": {
          "Target": "TCP:5050",
          "UnhealthyThreshold": "2",
          "Timeout": "5",
          "Interval": "30",
          "HealthyThreshold": "2"
        },
        "SecurityGroups": [
          {
            "Ref": "LbSecurityGroup"
          },
          {
            "Ref": "AdminSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP",
            "InstancePort": "80"
          },
          {
            "LoadBalancerPort": "443",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP",
            "InstancePort": "443"
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      },
      "DependsOn": "GatewayToInternet",
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "c500d8eb-9929-43e8-af1a-75cb3a725b56"
        }
      }
    },
    "PublicSlaveServerGroup": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters",
              "StackCreationTimeout",
              "default"
            ]
          },
          "Count": {
            "Ref": "PublicSlaveInstanceCount"
          }
        }
      },
      "Properties": {
        "DesiredCapacity": {
          "Ref": "PublicSlaveInstanceCount"
        },
        "LoadBalancerNames": [
          {
            "Ref": "PublicSlaveLoadBalancer"
          }
        ],
        "MinSize": {
          "Ref": "PublicSlaveInstanceCount"
        },
        "MaxSize": {
          "Ref": "PublicSlaveInstanceCount"
        },
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PublicSubnet",
              "AvailabilityZone"
            ]
          }
        ],
        "Tags": [
          {
            "Value": "mesos-slave",
            "Key": "role",
            "PropagateAtLaunch": "true"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "PublicSlaveLaunchConfig"
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      },
      "DependsOn": "GatewayToInternet",
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "f4b31ce5-75e2-4a72-b337-032897bbf5d5"
        }
      }
    },
    "PublicSlaveIngressFour": {
      "Properties": {
        "IpProtocol": "udp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "FromPort": "0",
        "ToPort": "21"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "PublicSlaveIngressOne": {
      "Properties": {
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "FromPort": "0",
        "ToPort": "21"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "GatewayToInternet": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      },
      "DependsOn": "InternetGateway",
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "0e3ea0ed-8965-4d9b-b757-d4f269d06b86"
        }
      }
    },
    "NATInstance": {
      "Properties": {
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "SubnetId": {
              "Ref": "PublicSubnet"
            },
            "AssociatePublicIpAddress": "true",
            "GroupSet": [
              {
                "Ref": "SlaveSecurityGroup"
              },
              {
                "Ref": "MasterSecurityGroup"
              },
              {
                "Ref": "AdminSecurityGroup"
              }
            ]
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceType": "m3.medium",
        "ImageId": {
          "Fn::FindInMap": [
            "NATAmi",
            {
              "Ref": "AWS::Region"
            },
            "default"
          ]
        },
        "SourceDestCheck": "false"
      },
      "DependsOn": "GatewayToInternet",
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "87f589a8-57dc-4944-90bc-9bd8dc2da2d9"
        }
      }
    },
    "MasterServerGroup": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters",
              "StackCreationTimeout",
              "default"
            ]
          },
          "Count": 1
        }
      },
      "Properties": {
        "DesiredCapacity": 1,
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          },
          {
            "Ref": "InternalMasterLoadBalancer"
          }
        ],
        "MinSize": 1,
        "MaxSize": 1,
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PublicSubnet",
              "AvailabilityZone"
            ]
          }
        ],
        "Tags": [
          {
            "Value": "mesos-master",
            "Key": "role",
            "PropagateAtLaunch": "true"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "MasterLaunchConfig"
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      },
      "DependsOn": "GatewayToInternet",
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "ce1c6e72-5e5d-4d68-a744-db31124aeba9"
        }
      }
    },
    "SlaveToMasterIngress": {
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "FromPort": "0",
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "a5273b92-cc8b-4e0f-9506-752cab2aa617"
        }
      }
    },
    "PublicSlaveIngressFive": {
      "Properties": {
        "IpProtocol": "udp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "FromPort": "23",
        "ToPort": "5050"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "PublicSlaveLaunchConfig": {
      "Properties": {
        "EbsOptimized": "true",
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "PublicSlaveSecurityGroup"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi",
            {
              "Ref": "AWS::Region"
            },
            "stable"
          ]
        },
        "AssociatePublicIpAddress": "true",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\"coreos\":\n",
                "  \"units\":\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n",
                "      Before=var-lib.mount dbus.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      RemainAfterExit=yes\n",
                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                "    \"name\": |-\n",
                "      format-var-lib-ephemeral.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Mount /var/lib\n",
                "      Before=dbus.service\n",
                "      [Mount]\n",
                "      What=/dev/xvdb\n",
                "      Where=/var/lib\n",
                "      Type=ext4\n",
                "    \"name\": |-\n",
                "      var-lib.mount\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      etcd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      update-engine.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      locksmithd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"name\": |-\n",
                "      systemd-resolved.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      systemd-journald.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      docker.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Before=dcos.target\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                "    \"name\": |-\n",
                "      dcos-link-env.service\n",
                "  - \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Download DC/OS to this host.\n",
                "      After=network-online.target\n",
                "      Wants=network-online.target\n",
                "      ConditionPathExists=!/opt/mesosphere/\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/stable/bootstrap/e73ba2b1cd17795e4dcb3d6647d11a29b9c35084.bootstrap.tar.xz\n",
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                "    \"name\": |-\n",
                "      dcos-download.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Specialize DC/OS for this host.\n",
                "      Requires=dcos-download.service\n",
                "      After=dcos-download.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                "      [Install]\n",
                "      WantedBy=multi-user.target\n",
                "    \"enable\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      dcos-setup.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |-\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Signal CloudFormation Success\n",
                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                "      [Service]\n",
                "      Type=simple\n",
                "      Restart=on-failure\n",
                "      StartLimitInterval=0\n",
                "      RestartSec=15s\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=PublicSlaveServerGroup\"\n",
                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                "    \"name\": |-\n",
                "      dcos-cfn-signal.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  \"update\":\n",
                "    \"reboot-strategy\": |-\n",
                "      off\n",
                "\"write_files\":\n",
                "- \"content\": |\n",
                "    https://downloads.dcos.io/dcos/stable\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/repository-url\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [\"dcos-config--setup_350261710e452adb80359ce58c23466e2790a119\", \"dcos-metadata--setup_350261710e452adb80359ce58c23466e2790a119\"]\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [Journal]\n",
                "    MaxLevelConsole=warning\n",
                "    RateLimitInterval=1s\n",
                "    RateLimitBurst=20000\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/systemd/journald.conf.d/dcos.conf\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    rexray:\n",
                "      loglevel: info\n",
                "      modules:\n",
                "        default-admin:\n",
                "          host: tcp://127.0.0.1:61003\n",
                "      storageDrivers:\n",
                "      - ec2\n",
                "      volume:\n",
                "        unmount:\n",
                "          ignoreusedcount: true\n",
                "  \"path\": |-\n",
                "    /etc/rexray/config.yml\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    MESOS_CLUSTER=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                "- \"content\": |\n",
                "    ADMINROUTER_ACTIVATE_AUTH_MODULE=",
                {
                  "Ref": "OAuthEnabled"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n",
                "- \"content\": |\n",
                "    MASTER_SOURCE=exhibitor_uri\n",
                "    EXHIBITOR_URI=http://",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                ":8181/exhibitor/v1/cluster/status",
                "\n",
                "    EXHIBITOR_ADDRESS=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    RESOLVERS=169.254.169.253\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                "- \"content\": |\n",
                "    EXHIBITOR_BACKEND=AWS_S3\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_S3_BUCKET=",
                {
                  "Ref": "ExhibitorS3Bucket"
                },
                "",
                "\n",
                "    AWS_S3_PREFIX=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                "- \"content\": |\n",
                "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n",
                "\n",
                "    \"authentication\":{\"enabled\":false},\n",
                "\n",
                "    \"oauth\":{\"enabled\":",
                {
                  "Ref": "OAuthEnabled"
                },
                ",\"authHost\":\"https://dcos.auth0.com\"},",
                "\n",
                "\n",
                "\n",
                "    \"tracking\":{\"enabled\":true}}}}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n",
                "- \"content\": |\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_STACK_ID=",
                {
                  "Ref": "AWS::StackId"
                },
                "",
                "\n",
                "    AWS_STACK_NAME=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "    AWS_IAM_MASTER_ROLE_NAME=",
                {
                  "Ref": "MasterRole"
                },
                "",
                "\n",
                "    AWS_IAM_SLAVE_ROLE_NAME=",
                {
                  "Ref": "SlaveRole"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
                "- \"content\": |\n",
                "    INTERNAL_MASTER_LB_DNSNAME=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    MASTER_LB_DNSNAME=",
                {
                  "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/aws_dnsnames\n",
                "- \"content\": |-\n",
                "    {}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/slave_public\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws\n"
              ]
            ]
          }
        },
        "BlockDeviceMappings": [
          {
            "VirtualName": "ephemeral0",
            "DeviceName": "/dev/sdb"
          }
        ],
        "InstanceType": {
          "Fn::FindInMap": [
            "Parameters",
            "PublicSlaveInstanceType",
            "default"
          ]
        },
        "IamInstanceProfile": {
          "Ref": "SlaveInstanceProfile"
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "cd9920e1-b7d4-443f-9e0d-ab74dfca0663"
        }
      }
    },
    "MasterSecurityGroup": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "Mesos Masters",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "FromPort": "5050",
            "ToPort": "5050"
          },
          {
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "FromPort": "80",
            "ToPort": "80"
          },
          {
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "FromPort": "443",
            "ToPort": "443"
          },
          {
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "FromPort": "8080",
            "ToPort": "8080"
          },
          {
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "FromPort": "8181",
            "ToPort": "8181"
          },
          {
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "FromPort": "2181",
            "ToPort": "2181"
          }
        ]
      },
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "09794e9b-0b3f-4c96-bfaa-bfc446a160ac"
        }
      }
    },
    "PublicSubnetNetworkAclAssociation": {
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "5c6fa025-d4dc-4f3b-a2fc-3ae54ffabd19"
        }
      }
    },
    "InternalMasterLoadBalancer": {
      "Properties": {
        "HealthCheck": {
          "Target": "TCP:5050",
          "UnhealthyThreshold": "2",
          "Timeout": "5",
          "Interval": "30",
          "HealthyThreshold": "2"
        },
        "Scheme": "internal",
        "SecurityGroups": [
          {
            "Ref": "LbSecurityGroup"
          },
          {
            "Ref": "AdminSecurityGroup"
          },
          {
            "Ref": "SlaveSecurityGroup"
          },
          {
            "Ref": "PublicSlaveSecurityGroup"
          },
          {
            "Ref": "MasterSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "5050",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP",
            "InstancePort": "5050"
          },
          {
            "LoadBalancerPort": "2181",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP",
            "InstancePort": "2181"
          },
          {
            "LoadBalancerPort": "8181",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP",
            "InstancePort": "8181"
          },
          {
            "LoadBalancerPort": "80",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP",
            "InstancePort": "80"
          },
          {
            "LoadBalancerPort": "443",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP",
            "InstancePort": "443"
          },
          {
            "LoadBalancerPort": "8080",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP",
            "InstancePort": "8080"
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "d9798406-bf54-4061-a5a9-eb18f91f706b"
        }
      }
    },
    "PublicSlaveToMasterIngress": {
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "FromPort": "0",
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "19940039-1acd-484b-842a-bb584d4984ff"
        }
      }
    },
    "SlaveServerGroup": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters",
              "StackCreationTimeout",
              "default"
            ]
          },
          "Count": {
            "Ref": "SlaveInstanceCount"
          }
        }
      },
      "Properties": {
        "DesiredCapacity": {
          "Ref": "SlaveInstanceCount"
        },
        "MinSize": {
          "Ref": "SlaveInstanceCount"
        },
        "MaxSize": {
          "Ref": "SlaveInstanceCount"
        },
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PrivateSubnet",
              "AvailabilityZone"
            ]
          }
        ],
        "Tags": [
          {
            "Value": "mesos-slave",
            "Key": "role",
            "PropagateAtLaunch": "true"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "SlaveLaunchConfig"
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "PrivateSubnet"
          }
        ]
      },
      "DependsOn": "GatewayToInternet",
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "1796af19-c09f-46e3-9df1-a324156013ad"
        }
      }
    },
    "PublicNetworkAcl": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      },
      "Type": "AWS::EC2::NetworkAcl",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "76b90941-a149-4959-b05a-d9782b2e65c9"
        }
      }
    },
    "PrivateNetworkAcl": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      },
      "Type": "AWS::EC2::NetworkAcl",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "c88c089c-ee14-4c59-ba46-ed08f2740db4"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociation": {
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "12b1b342-c593-41d7-b56f-d355c546a582"
        }
      }
    },
    "InboundNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "Egress": "false",
        "Protocol": "-1",
        "RuleAction": "allow",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      },
      "Type": "AWS::EC2::NetworkAclEntry",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "28ddc21b-3a6b-4177-ac98-786fc650a54a"
        }
      }
    },
    "PublicSubnet": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "Parameters",
            "PublicSubnetRange",
            "default"
          ]
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      },
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::Subnet",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "483b1df6-7fc4-436b-823c-eb6aec56609f"
        }
      }
    },
    "AdminSecurityGroup": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "Enable admin access to servers",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "CidrIp": {
              "Ref": "AdminLocation"
            },
            "FromPort": "22",
            "ToPort": "22"
          },
          {
            "IpProtocol": "tcp",
            "CidrIp": {
              "Ref": "AdminLocation"
            },
            "FromPort": "80",
            "ToPort": "80"
          },
          {
            "IpProtocol": "tcp",
            "CidrIp": {
              "Ref": "AdminLocation"
            },
            "FromPort": "443",
            "ToPort": "443"
          }
        ]
      },
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "1de54125-690f-4f3a-8a88-dad9b8565641"
        }
      }
    },
    "PublicRoute": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      },
      "DependsOn": "GatewayToInternet",
      "Type": "AWS::EC2::Route",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "e34dd428-2653-45bf-a526-f192a56571f3"
        }
      }
    },
    "SlaveToMasterLBIngress": {
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "IpProtocol": "tcp",
        "GroupId": {
          "Ref": "LbSecurityGroup"
        },
        "FromPort": "2181",
        "ToPort": "2181"
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "8399f57d-69df-4f3f-8189-be32111810af"
        }
      }
    },
    "SlaveToSlaveIngress": {
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "FromPort": "0",
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "PublicRouteTable": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      },
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::RouteTable",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "cb93ba8e-5ffd-4367-b559-ab5b1c1d6fbb"
        }
      }
    },
    "SlaveInstanceProfile": {
      "Properties": {
        "Roles": [
          {
            "Ref": "SlaveRole"
          }
        ],
        "Path": "/"
      },
      "Type": "AWS::IAM::InstanceProfile",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "b2d08d70-6f11-4e8b-9309-003b08f3a8a1"
        }
      }
    },
    "PublicSlaveToPublicSlaveIngress": {
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "FromPort": "0",
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "PublicSlaveIngressSix": {
      "Properties": {
        "IpProtocol": "udp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "FromPort": "5052",
        "ToPort": "32000"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SlaveSecurityGroup": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "Mesos Slaves"
      },
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "8beb8ec8-25ff-4518-8b39-e6a6708fa401"
        }
      }
    },
    "ExhibitorS3Bucket": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "a4371fb6-1504-474c-a77c-514619c74c1e"
        }
      }
    },
    "VPCDHCPOptionsAssociation": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "DhcpOptionsId": {
          "Ref": "DHCPOptions"
        }
      },
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "48c2cc32-2edc-4178-a9f2-9138343282a6"
        }
      }
    },
    "SlaveRole": {
      "Properties": {
        "Policies": [
          {
            "PolicyName": "Slaves",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:*"
                  ],
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::StackId"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateTags",
                    "ec2:DescribeInstances",
                    "ec2:CreateVolume",
                    "ec2:DeleteVolume",
                    "ec2:AttachVolume",
                    "ec2:DetachVolume",
                    "ec2:DescribeVolumes",
                    "ec2:DescribeVolumeStatus",
                    "ec2:DescribeVolumeAttribute",
                    "ec2:CreateSnapshot",
                    "ec2:CopySnapshot",
                    "ec2:DeleteSnapshot",
                    "ec2:DescribeSnapshots",
                    "ec2:DescribeSnapshotAttribute",
                    "autoscaling:DescribeAutoScalingGroups",
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                }
              ],
              "Version": "2012-10-17"
            }
          }
        ],
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "74c6221e-df74-4edb-aec4-718917a9f565"
        }
      }
    },
    "MasterRole": {
      "Properties": {
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:DeleteObject",
                    "s3:GetBucketAcl",
                    "s3:GetBucketPolicy",
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:ListMultipartUploadParts",
                    "s3:PutObject",
                    "s3:PutObjectAcl"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::If": [
                              "RegionIsUsGovWest1",
                              "arn:aws-us-gov:s3:::",
                              "arn:aws:s3:::"
                            ]
                          },
                          {
                            "Ref": "ExhibitorS3Bucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::If": [
                              "RegionIsUsGovWest1",
                              "arn:aws-us-gov:s3:::",
                              "arn:aws:s3:::"
                            ]
                          },
                          {
                            "Ref": "ExhibitorS3Bucket"
                          }
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:*"
                  ],
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::StackId"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeSubnets",
                    "autoscaling:DescribeLaunchConfigurations",
                    "autoscaling:UpdateAutoScalingGroup",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeScalingActivities",
                    "elasticloadbalancing:DescribeLoadBalancers"
                  ],
                  "Resource": "*"
                }
              ],
              "Version": "2012-10-17"
            }
          }
        ],
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/"
      },
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "f6c842a9-1c3f-4d4f-a69b-4d791662b5c7"
        }
      }
    },
    "MasterInstanceProfile": {
      "Properties": {
        "Roles": [
          {
            "Ref": "MasterRole"
          }
        ],
        "Path": "/"
      },
      "Type": "AWS::IAM::InstanceProfile",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "059d9b6a-0e55-4a11-ba12-b3852b055421"
        }
      }
    },
    "MasterToPublicSlaveIngress": {
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "FromPort": "0",
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "f45c0b77-7912-4a51-92a4-ce27e7849c69"
        }
      }
    },
    "PrivateRouteTable": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      },
      "Type": "AWS::EC2::RouteTable",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "eb322cf7-f6f6-47a3-bba1-59d68f3bb961"
        }
      }
    },
    "PublicSlaveLoadBalancer": {
      "Properties": {
        "HealthCheck": {
          "Target": "HTTP:9090/_haproxy_health_check",
          "UnhealthyThreshold": "2",
          "Timeout": "2",
          "Interval": "5",
          "HealthyThreshold": "2"
        },
        "SecurityGroups": [
          {
            "Ref": "PublicSlaveSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP",
            "InstancePort": "80"
          },
          {
            "LoadBalancerPort": "443",
            "Protocol": "TCP",
            "InstanceProtocol": "TCP",
            "InstancePort": "443"
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      },
      "DependsOn": "GatewayToInternet",
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "4414725e-16c2-4b7e-82ff-52747eede87d"
        }
      }
    },
    "InternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ]
      },
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::InternetGateway",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "c495822e-01ad-4c98-a60e-4031e3a4d24c"
        }
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "cf66e490-6529-4c64-9acf-6655ea5c1ee7"
        }
      }
    },
    "PrivateOutboundNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "Egress": "true",
        "Protocol": "-1",
        "RuleAction": "allow",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      },
      "Type": "AWS::EC2::NetworkAclEntry",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "e269025c-e43e-4397-8798-b5f596468ae7"
        }
      }
    },
    "MasterToMasterIngress": {
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "FromPort": "0",
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "LbSecurityGroup": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "Mesos Master LB"
      },
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "902e65ce-8890-40c0-9bf4-678858640771"
        }
      }
    },
    "PublicSlaveIngressTwo": {
      "Properties": {
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "FromPort": "23",
        "ToPort": "5050"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "PrivateInboundNetworkAclEntry": {
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "Egress": "false",
        "Protocol": "-1",
        "RuleAction": "allow",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      },
      "Type": "AWS::EC2::NetworkAclEntry",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "c1097873-fcfb-4727-8160-3420cab1da12"
        }
      }
    },
    "SlaveLaunchConfig": {
      "Properties": {
        "EbsOptimized": "true",
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "SlaveSecurityGroup"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi",
            {
              "Ref": "AWS::Region"
            },
            "stable"
          ]
        },
        "AssociatePublicIpAddress": "false",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\"coreos\":\n",
                "  \"units\":\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n",
                "      Before=var-lib.mount dbus.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      RemainAfterExit=yes\n",
                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                "    \"name\": |-\n",
                "      format-var-lib-ephemeral.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Mount /var/lib\n",
                "      Before=dbus.service\n",
                "      [Mount]\n",
                "      What=/dev/xvdb\n",
                "      Where=/var/lib\n",
                "      Type=ext4\n",
                "    \"name\": |-\n",
                "      var-lib.mount\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      etcd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      update-engine.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      locksmithd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"name\": |-\n",
                "      systemd-resolved.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      systemd-journald.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      docker.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Before=dcos.target\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                "    \"name\": |-\n",
                "      dcos-link-env.service\n",
                "  - \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Download DC/OS to this host.\n",
                "      After=network-online.target\n",
                "      Wants=network-online.target\n",
                "      ConditionPathExists=!/opt/mesosphere/\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/stable/bootstrap/e73ba2b1cd17795e4dcb3d6647d11a29b9c35084.bootstrap.tar.xz\n",
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                "    \"name\": |-\n",
                "      dcos-download.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Specialize DC/OS for this host.\n",
                "      Requires=dcos-download.service\n",
                "      After=dcos-download.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                "      [Install]\n",
                "      WantedBy=multi-user.target\n",
                "    \"enable\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      dcos-setup.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |-\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Signal CloudFormation Success\n",
                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                "      [Service]\n",
                "      Type=simple\n",
                "      Restart=on-failure\n",
                "      StartLimitInterval=0\n",
                "      RestartSec=15s\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup\"\n",
                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                "    \"name\": |-\n",
                "      dcos-cfn-signal.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  \"update\":\n",
                "    \"reboot-strategy\": |-\n",
                "      off\n",
                "\"write_files\":\n",
                "- \"content\": |\n",
                "    https://downloads.dcos.io/dcos/stable\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/repository-url\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [\"dcos-config--setup_350261710e452adb80359ce58c23466e2790a119\", \"dcos-metadata--setup_350261710e452adb80359ce58c23466e2790a119\"]\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [Journal]\n",
                "    MaxLevelConsole=warning\n",
                "    RateLimitInterval=1s\n",
                "    RateLimitBurst=20000\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/systemd/journald.conf.d/dcos.conf\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    rexray:\n",
                "      loglevel: info\n",
                "      modules:\n",
                "        default-admin:\n",
                "          host: tcp://127.0.0.1:61003\n",
                "      storageDrivers:\n",
                "      - ec2\n",
                "      volume:\n",
                "        unmount:\n",
                "          ignoreusedcount: true\n",
                "  \"path\": |-\n",
                "    /etc/rexray/config.yml\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    MESOS_CLUSTER=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                "- \"content\": |\n",
                "    ADMINROUTER_ACTIVATE_AUTH_MODULE=",
                {
                  "Ref": "OAuthEnabled"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n",
                "- \"content\": |\n",
                "    MASTER_SOURCE=exhibitor_uri\n",
                "    EXHIBITOR_URI=http://",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                ":8181/exhibitor/v1/cluster/status",
                "\n",
                "    EXHIBITOR_ADDRESS=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    RESOLVERS=169.254.169.253\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                "- \"content\": |\n",
                "    EXHIBITOR_BACKEND=AWS_S3\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_S3_BUCKET=",
                {
                  "Ref": "ExhibitorS3Bucket"
                },
                "",
                "\n",
                "    AWS_S3_PREFIX=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                "- \"content\": |\n",
                "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n",
                "\n",
                "    \"authentication\":{\"enabled\":false},\n",
                "\n",
                "    \"oauth\":{\"enabled\":",
                {
                  "Ref": "OAuthEnabled"
                },
                ",\"authHost\":\"https://dcos.auth0.com\"},",
                "\n",
                "\n",
                "\n",
                "    \"tracking\":{\"enabled\":true}}}}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n",
                "- \"content\": |\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_STACK_ID=",
                {
                  "Ref": "AWS::StackId"
                },
                "",
                "\n",
                "    AWS_STACK_NAME=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "    AWS_IAM_MASTER_ROLE_NAME=",
                {
                  "Ref": "MasterRole"
                },
                "",
                "\n",
                "    AWS_IAM_SLAVE_ROLE_NAME=",
                {
                  "Ref": "SlaveRole"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
                "- \"content\": |\n",
                "    INTERNAL_MASTER_LB_DNSNAME=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    MASTER_LB_DNSNAME=",
                {
                  "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/aws_dnsnames\n",
                "- \"content\": |-\n",
                "    {}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/slave\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws\n"
              ]
            ]
          }
        },
        "BlockDeviceMappings": [
          {
            "VirtualName": "ephemeral0",
            "DeviceName": "/dev/sdb"
          }
        ],
        "InstanceType": {
          "Fn::FindInMap": [
            "Parameters",
            "SlaveInstanceType",
            "default"
          ]
        },
        "IamInstanceProfile": {
          "Ref": "SlaveInstanceProfile"
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "88517ea8-97b6-4d23-b46c-ac1731f339d0"
        }
      }
    },
    "PublicSlaveSecurityGroup": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "GroupDescription": "Mesos Slaves Public"
      },
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "25bf8ac8-379a-4383-a064-8479b44b6767"
        }
      }
    },
    "SlaveToPublicSlaveIngress": {
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "FromPort": "0",
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "b47ea0f6-57e5-497e-989d-c6aa1de07502"
        }
      }
    },
    "PublicSlaveToSlaveIngress": {
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "FromPort": "0",
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "25edc8b4-6d2f-4ea2-8c67-c4d744822018"
        }
      }
    },
    "DHCPOptions": {
      "Properties": {
        "DomainName": {
          "Fn::If": [
            "RegionIsUsEast1",
            "ec2.internal",
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::Region"
                  },
                  ".compute.internal"
                ]
              ]
            }
          ]
        },
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      },
      "Type": "AWS::EC2::DHCPOptions",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "884c9386-07fb-4acb-a626-c72fa6136b84"
        }
      }
    },
    "Vpc": {
      "Properties": {
        "Tags": [
          {
            "Value": {
              "Ref": "AWS::StackName"
            },
            "Key": "Application"
          },
          {
            "Value": "Public",
            "Key": "Network"
          }
        ],
        "CidrBlock": {
          "Fn::FindInMap": [
            "Parameters",
            "VPCSubnetRange",
            "default"
          ]
        },
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true"
      },
      "Type": "AWS::EC2::VPC",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "fe88d63b-0847-4cd1-be43-3d9db1b93824"
        }
      }
    },
    "MasterToSlaveIngress": {
      "Properties": {
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "FromPort": "0",
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "9c0a65b6-9b6a-456f-8c8c-ce0a5b481d45"
        }
      }
    },
    "MasterLaunchConfig": {
      "Properties": {
        "EbsOptimized": "true",
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "MasterSecurityGroup"
          },
          {
            "Ref": "AdminSecurityGroup"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi",
            {
              "Ref": "AWS::Region"
            },
            "stable"
          ]
        },
        "AssociatePublicIpAddress": "true",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\"coreos\":\n",
                "  \"units\":\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n",
                "      Before=var-lib.mount dbus.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      RemainAfterExit=yes\n",
                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                "    \"name\": |-\n",
                "      format-var-lib-ephemeral.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Mount /var/lib\n",
                "      Before=dbus.service\n",
                "      [Mount]\n",
                "      What=/dev/xvdb\n",
                "      Where=/var/lib\n",
                "      Type=ext4\n",
                "    \"name\": |-\n",
                "      var-lib.mount\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      etcd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      update-engine.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      locksmithd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"name\": |-\n",
                "      systemd-resolved.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      systemd-journald.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      docker.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Before=dcos.target\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                "    \"name\": |-\n",
                "      dcos-link-env.service\n",
                "  - \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Download DC/OS to this host.\n",
                "      After=network-online.target\n",
                "      Wants=network-online.target\n",
                "      ConditionPathExists=!/opt/mesosphere/\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/stable/bootstrap/e73ba2b1cd17795e4dcb3d6647d11a29b9c35084.bootstrap.tar.xz\n",
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                "    \"name\": |-\n",
                "      dcos-download.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Specialize DC/OS for this host.\n",
                "      Requires=dcos-download.service\n",
                "      After=dcos-download.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                "      [Install]\n",
                "      WantedBy=multi-user.target\n",
                "    \"enable\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      dcos-setup.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |-\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Signal CloudFormation Success\n",
                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                "      [Service]\n",
                "      Type=simple\n",
                "      Restart=on-failure\n",
                "      StartLimitInterval=0\n",
                "      RestartSec=15s\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup\"\n",
                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                "    \"name\": |-\n",
                "      dcos-cfn-signal.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  \"update\":\n",
                "    \"reboot-strategy\": |-\n",
                "      off\n",
                "\"write_files\":\n",
                "- \"content\": |\n",
                "    https://downloads.dcos.io/dcos/stable\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/repository-url\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [\"dcos-config--setup_350261710e452adb80359ce58c23466e2790a119\", \"dcos-metadata--setup_350261710e452adb80359ce58c23466e2790a119\"]\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [Journal]\n",
                "    MaxLevelConsole=warning\n",
                "    RateLimitInterval=1s\n",
                "    RateLimitBurst=20000\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/systemd/journald.conf.d/dcos.conf\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    rexray:\n",
                "      loglevel: info\n",
                "      modules:\n",
                "        default-admin:\n",
                "          host: tcp://127.0.0.1:61003\n",
                "      storageDrivers:\n",
                "      - ec2\n",
                "      volume:\n",
                "        unmount:\n",
                "          ignoreusedcount: true\n",
                "  \"path\": |-\n",
                "    /etc/rexray/config.yml\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    MESOS_CLUSTER=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                "- \"content\": |\n",
                "    ADMINROUTER_ACTIVATE_AUTH_MODULE=",
                {
                  "Ref": "OAuthEnabled"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n",
                "- \"content\": |\n",
                "    MASTER_SOURCE=exhibitor_uri\n",
                "    EXHIBITOR_URI=http://",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                ":8181/exhibitor/v1/cluster/status",
                "\n",
                "    EXHIBITOR_ADDRESS=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    RESOLVERS=169.254.169.253\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                "- \"content\": |\n",
                "    EXHIBITOR_BACKEND=AWS_S3\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_S3_BUCKET=",
                {
                  "Ref": "ExhibitorS3Bucket"
                },
                "",
                "\n",
                "    AWS_S3_PREFIX=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                "- \"content\": |\n",
                "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n",
                "\n",
                "    \"authentication\":{\"enabled\":false},\n",
                "\n",
                "    \"oauth\":{\"enabled\":",
                {
                  "Ref": "OAuthEnabled"
                },
                ",\"authHost\":\"https://dcos.auth0.com\"},",
                "\n",
                "\n",
                "\n",
                "    \"tracking\":{\"enabled\":true}}}}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n",
                "- \"content\": |\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_STACK_ID=",
                {
                  "Ref": "AWS::StackId"
                },
                "",
                "\n",
                "    AWS_STACK_NAME=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "    AWS_IAM_MASTER_ROLE_NAME=",
                {
                  "Ref": "MasterRole"
                },
                "",
                "\n",
                "    AWS_IAM_SLAVE_ROLE_NAME=",
                {
                  "Ref": "SlaveRole"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
                "- \"content\": |\n",
                "    INTERNAL_MASTER_LB_DNSNAME=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    MASTER_LB_DNSNAME=",
                {
                  "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/aws_dnsnames\n",
                "- \"content\": |-\n",
                "    {}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/master\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws_master\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws\n"
              ]
            ]
          }
        },
        "BlockDeviceMappings": [
          {
            "VirtualName": "ephemeral0",
            "DeviceName": "/dev/sdb"
          }
        ],
        "InstanceType": {
          "Fn::FindInMap": [
            "Parameters",
            "MasterInstanceType",
            "default"
          ]
        },
        "IamInstanceProfile": {
          "Ref": "MasterInstanceProfile"
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "2a08317a-1625-405f-af11-858b056ceedc"
        }
      }
    }
  }
}